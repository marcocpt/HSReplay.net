# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-10 07:36
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import hearthstone.enums
import hsreplaynet.games.models
import hsreplaynet.utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cards', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameReplay',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('shortid', hsreplaynet.utils.fields.ShortUUIDField(blank=True, editable=False, max_length=22, unique=True, verbose_name='Short ID')),
                ('friendly_player_id', hsreplaynet.utils.fields.PlayerIDField(choices=[(1, 1), (2, 2)], help_text='PlayerID of the friendly player (1 or 2)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)], verbose_name='Friendly PlayerID')),
                ('spectator_mode', models.BooleanField(default=False)),
                ('spectator_password', models.CharField(blank=True, max_length=16, verbose_name='Spectator Password')),
                ('client_handle', models.IntegerField(blank=True, null=True)),
                ('aurora_password', models.CharField(blank=True, max_length=16)),
                ('build', models.PositiveIntegerField(blank=True, null=True, verbose_name='Hearthstone Build')),
                ('replay_xml', models.FileField(upload_to=hsreplaynet.games.models._generate_upload_path)),
                ('hsreplay_version', models.CharField(help_text='The HSReplay spec version of the HSReplay XML file', max_length=8, verbose_name='HSReplay version')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates user request to delete the upload', verbose_name='Soft deleted')),
                ('won', models.NullBooleanField()),
                ('disconnected', models.BooleanField(default=False)),
                ('reconnecting', models.BooleanField(default=False, help_text='Whether the player is reconnecting to an existing game', verbose_name='Is reconnecting')),
                ('resumable', models.NullBooleanField()),
                ('visibility', hsreplaynet.utils.fields.IntEnumField(choices=[(1, 'Public'), (2, 'Unlisted')], default=1, validators=[hsreplaynet.utils.fields.IntEnumValidator(hsreplaynet.games.models.Visibility)])),
                ('hide_player_names', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('global_game',),
            },
        ),
        migrations.CreateModel(
            name='GlobalGame',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('game_handle', models.IntegerField(blank=True, help_text='Game ID on the Battle.net server', null=True, verbose_name='Game handle')),
                ('server_address', models.GenericIPAddressField(blank=True, null=True)),
                ('server_port', models.IntegerField(blank=True, null=True)),
                ('server_version', models.IntegerField(blank=True, null=True)),
                ('build', models.PositiveIntegerField(blank=True, help_text='Hearthstone build number the game was played on.', null=True)),
                ('match_start', models.DateTimeField(help_text='Must be a timezone aware datetime.', verbose_name='Match start')),
                ('match_end', models.DateTimeField(help_text='Must be a timezone aware datetime.', verbose_name='Match end')),
                ('game_type', hsreplaynet.utils.fields.IntEnumField(blank=True, choices=[(0, 'BGT_UNKNOWN'), (1, 'BGT_FRIENDS'), (2, 'BGT_RANKED_STANDARD'), (3, 'BGT_ARENA'), (4, 'BGT_VS_AI'), (5, 'BGT_TUTORIAL'), (6, 'BGT_ASYNC'), (9, 'BGT_NEWBIE'), (7, 'BGT_CASUAL_STANDARD'), (8, 'BGT_TEST1'), (10, 'BGT_TEST3'), (16, 'BGT_TAVERNBRAWL_PVP'), (17, 'BGT_TAVERNBRAWL_1P_VERSUS_AI'), (18, 'BGT_TAVERNBRAWL_2P_COOP'), (30, 'BGT_RANKED_WILD'), (31, 'BGT_CASUAL_WILD'), (32, 'BGT_LAST')], null=True, validators=[hsreplaynet.utils.fields.IntEnumValidator(hearthstone.enums.BnetGameType)], verbose_name='Game type')),
                ('format', hsreplaynet.utils.fields.IntEnumField(choices=[(0, 'FT_UNKNOWN'), (1, 'FT_WILD'), (2, 'FT_STANDARD')], default=0, validators=[hsreplaynet.utils.fields.IntEnumValidator(hearthstone.enums.FormatType)], verbose_name='Format type')),
                ('ladder_season', models.IntegerField(blank=True, help_text='The season as calculated from the match start timestamp.', null=True, verbose_name='Ladder season')),
                ('brawl_season', models.IntegerField(default=0, help_text='The brawl season which increments every time the brawl changes.', verbose_name='Tavern Brawl season')),
                ('scenario_id', models.IntegerField(blank=True, help_text='ID from DBF/SCENARIO.xml or Scenario cache', null=True, verbose_name='Scenario ID')),
                ('num_turns', models.IntegerField()),
                ('num_entities', models.IntegerField()),
            ],
            options={
                'ordering': ('-match_start',),
            },
        ),
        migrations.CreateModel(
            name='GlobalGamePlayer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=64, verbose_name='Player name')),
                ('real_name', models.CharField(blank=True, max_length=64, verbose_name='Real name')),
                ('player_id', hsreplaynet.utils.fields.PlayerIDField(blank=True, choices=[(1, 1), (2, 2)], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)])),
                ('account_hi', models.BigIntegerField(blank=True, help_text='The region value from account hilo', null=True, verbose_name='Account Hi')),
                ('account_lo', models.BigIntegerField(blank=True, help_text='The account ID value from account hilo', null=True, verbose_name='Account Lo')),
                ('is_ai', models.BooleanField(default=False, help_text='Whether the player is an AI.', verbose_name='Is AI')),
                ('is_first', models.BooleanField(help_text='Whether the player is the first player', verbose_name='Is first player')),
                ('hero_premium', models.BooleanField(default=False, help_text="Whether the player's initial hero is golden.", verbose_name='Hero Premium')),
                ('final_state', hsreplaynet.utils.fields.IntEnumField(choices=[(0, 'INVALID'), (1, 'PLAYING'), (2, 'WINNING'), (3, 'LOSING'), (4, 'WON'), (5, 'LOST'), (6, 'TIED'), (7, 'DISCONNECTED'), (8, 'CONCEDED')], default=0, validators=[hsreplaynet.utils.fields.IntEnumValidator(hearthstone.enums.PlayState)], verbose_name='Final State')),
                ('rank', models.SmallIntegerField(blank=True, help_text='1 through 25, or 0 for legend.', null=True, verbose_name='Rank')),
                ('legend_rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Legend rank')),
                ('stars', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Stars')),
                ('wins', models.PositiveIntegerField(blank=True, help_text='Number of wins in the current game mode (eg. ladder season, arena key...)', null=True, verbose_name='Wins')),
                ('losses', models.PositiveIntegerField(blank=True, help_text='Number of losses in the current game mode (current season)', null=True, verbose_name='Losses')),
                ('deck_id', models.IntegerField(blank=True, null=True, verbose_name='Deck ID')),
                ('cardback_id', models.IntegerField(blank=True, null=True, verbose_name='Cardback ID')),
                ('deck_list', models.ForeignKey(help_text="As much as is known of the player's starting deck list.", on_delete=django.db.models.deletion.PROTECT, to='......cards.models.CardList')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='games.GlobalGame')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.Card')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PendingReplayOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('replay', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ownership_claim', to='games.GameReplay')),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replay_claims', to='api.AuthToken')),
            ],
        ),
        migrations.AddField(
            model_name='gamereplay',
            name='global_game',
            field=models.ForeignKey(help_text='References the single global game that this replay shows.', on_delete=django.db.models.deletion.CASCADE, related_name='replays', to='games.GlobalGame'),
        ),
        migrations.AddField(
            model_name='gamereplay',
            name='upload_token',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replays', to='api.AuthToken'),
        ),
        migrations.AddField(
            model_name='gamereplay',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='pendingreplayownership',
            unique_together=set([('replay', 'token')]),
        ),
        migrations.AlterUniqueTogether(
            name='gamereplay',
            unique_together=set([('upload_token', 'global_game')]),
        ),
    ]
